
it2021_bms.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000a58  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08000b94  08000b94  00010b94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08000bc0  08000bc0  00010bc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000bc4  08000bc4  00010bc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08000bc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000001c  20000004  08000bcc  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  20000020  08000bcc  00020020  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_info   00002109  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000690  00000000  00000000  00022136  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000110  00000000  00000000  000227c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  000228d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00000a38  00000000  00000000  000229a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00000872  00000000  00000000  000233d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00023c4a  2**0
                  CONTENTS, READONLY
 16 .debug_frame  0000039c  00000000  00000000  00023cc8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000004 	.word	0x20000004
 8000158:	00000000 	.word	0x00000000
 800015c:	08000b7c 	.word	0x08000b7c

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000008 	.word	0x20000008
 8000178:	08000b7c 	.word	0x08000b7c

0800017c <__aeabi_fmul>:
 800017c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000180:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000184:	bf1e      	ittt	ne
 8000186:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800018a:	ea92 0f0c 	teqne	r2, ip
 800018e:	ea93 0f0c 	teqne	r3, ip
 8000192:	d06f      	beq.n	8000274 <__aeabi_fmul+0xf8>
 8000194:	441a      	add	r2, r3
 8000196:	ea80 0c01 	eor.w	ip, r0, r1
 800019a:	0240      	lsls	r0, r0, #9
 800019c:	bf18      	it	ne
 800019e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80001a2:	d01e      	beq.n	80001e2 <__aeabi_fmul+0x66>
 80001a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80001a8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80001ac:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80001b0:	fba0 3101 	umull	r3, r1, r0, r1
 80001b4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80001b8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80001bc:	bf3e      	ittt	cc
 80001be:	0049      	lslcc	r1, r1, #1
 80001c0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001c4:	005b      	lslcc	r3, r3, #1
 80001c6:	ea40 0001 	orr.w	r0, r0, r1
 80001ca:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001ce:	2afd      	cmp	r2, #253	; 0xfd
 80001d0:	d81d      	bhi.n	800020e <__aeabi_fmul+0x92>
 80001d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001d6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001da:	bf08      	it	eq
 80001dc:	f020 0001 	biceq.w	r0, r0, #1
 80001e0:	4770      	bx	lr
 80001e2:	f090 0f00 	teq	r0, #0
 80001e6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001ea:	bf08      	it	eq
 80001ec:	0249      	lsleq	r1, r1, #9
 80001ee:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001f2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001f6:	3a7f      	subs	r2, #127	; 0x7f
 80001f8:	bfc2      	ittt	gt
 80001fa:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001fe:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000202:	4770      	bxgt	lr
 8000204:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000208:	f04f 0300 	mov.w	r3, #0
 800020c:	3a01      	subs	r2, #1
 800020e:	dc5d      	bgt.n	80002cc <__aeabi_fmul+0x150>
 8000210:	f112 0f19 	cmn.w	r2, #25
 8000214:	bfdc      	itt	le
 8000216:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800021a:	4770      	bxle	lr
 800021c:	f1c2 0200 	rsb	r2, r2, #0
 8000220:	0041      	lsls	r1, r0, #1
 8000222:	fa21 f102 	lsr.w	r1, r1, r2
 8000226:	f1c2 0220 	rsb	r2, r2, #32
 800022a:	fa00 fc02 	lsl.w	ip, r0, r2
 800022e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000232:	f140 0000 	adc.w	r0, r0, #0
 8000236:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800023a:	bf08      	it	eq
 800023c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000240:	4770      	bx	lr
 8000242:	f092 0f00 	teq	r2, #0
 8000246:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800024a:	bf02      	ittt	eq
 800024c:	0040      	lsleq	r0, r0, #1
 800024e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000252:	3a01      	subeq	r2, #1
 8000254:	d0f9      	beq.n	800024a <__aeabi_fmul+0xce>
 8000256:	ea40 000c 	orr.w	r0, r0, ip
 800025a:	f093 0f00 	teq	r3, #0
 800025e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000262:	bf02      	ittt	eq
 8000264:	0049      	lsleq	r1, r1, #1
 8000266:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800026a:	3b01      	subeq	r3, #1
 800026c:	d0f9      	beq.n	8000262 <__aeabi_fmul+0xe6>
 800026e:	ea41 010c 	orr.w	r1, r1, ip
 8000272:	e78f      	b.n	8000194 <__aeabi_fmul+0x18>
 8000274:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000278:	ea92 0f0c 	teq	r2, ip
 800027c:	bf18      	it	ne
 800027e:	ea93 0f0c 	teqne	r3, ip
 8000282:	d00a      	beq.n	800029a <__aeabi_fmul+0x11e>
 8000284:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000288:	bf18      	it	ne
 800028a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800028e:	d1d8      	bne.n	8000242 <__aeabi_fmul+0xc6>
 8000290:	ea80 0001 	eor.w	r0, r0, r1
 8000294:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000298:	4770      	bx	lr
 800029a:	f090 0f00 	teq	r0, #0
 800029e:	bf17      	itett	ne
 80002a0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80002a4:	4608      	moveq	r0, r1
 80002a6:	f091 0f00 	teqne	r1, #0
 80002aa:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80002ae:	d014      	beq.n	80002da <__aeabi_fmul+0x15e>
 80002b0:	ea92 0f0c 	teq	r2, ip
 80002b4:	d101      	bne.n	80002ba <__aeabi_fmul+0x13e>
 80002b6:	0242      	lsls	r2, r0, #9
 80002b8:	d10f      	bne.n	80002da <__aeabi_fmul+0x15e>
 80002ba:	ea93 0f0c 	teq	r3, ip
 80002be:	d103      	bne.n	80002c8 <__aeabi_fmul+0x14c>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	bf18      	it	ne
 80002c4:	4608      	movne	r0, r1
 80002c6:	d108      	bne.n	80002da <__aeabi_fmul+0x15e>
 80002c8:	ea80 0001 	eor.w	r0, r0, r1
 80002cc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002d0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002d8:	4770      	bx	lr
 80002da:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002de:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002e2:	4770      	bx	lr

080002e4 <__aeabi_fdiv>:
 80002e4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80002e8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80002ec:	bf1e      	ittt	ne
 80002ee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80002f2:	ea92 0f0c 	teqne	r2, ip
 80002f6:	ea93 0f0c 	teqne	r3, ip
 80002fa:	d069      	beq.n	80003d0 <__aeabi_fdiv+0xec>
 80002fc:	eba2 0203 	sub.w	r2, r2, r3
 8000300:	ea80 0c01 	eor.w	ip, r0, r1
 8000304:	0249      	lsls	r1, r1, #9
 8000306:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800030a:	d037      	beq.n	800037c <__aeabi_fdiv+0x98>
 800030c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000310:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000314:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000318:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800031c:	428b      	cmp	r3, r1
 800031e:	bf38      	it	cc
 8000320:	005b      	lslcc	r3, r3, #1
 8000322:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000326:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800032a:	428b      	cmp	r3, r1
 800032c:	bf24      	itt	cs
 800032e:	1a5b      	subcs	r3, r3, r1
 8000330:	ea40 000c 	orrcs.w	r0, r0, ip
 8000334:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000338:	bf24      	itt	cs
 800033a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800033e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000342:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000346:	bf24      	itt	cs
 8000348:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800034c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000350:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000354:	bf24      	itt	cs
 8000356:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800035a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800035e:	011b      	lsls	r3, r3, #4
 8000360:	bf18      	it	ne
 8000362:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000366:	d1e0      	bne.n	800032a <__aeabi_fdiv+0x46>
 8000368:	2afd      	cmp	r2, #253	; 0xfd
 800036a:	f63f af50 	bhi.w	800020e <__aeabi_fmul+0x92>
 800036e:	428b      	cmp	r3, r1
 8000370:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000374:	bf08      	it	eq
 8000376:	f020 0001 	biceq.w	r0, r0, #1
 800037a:	4770      	bx	lr
 800037c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000380:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000384:	327f      	adds	r2, #127	; 0x7f
 8000386:	bfc2      	ittt	gt
 8000388:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800038c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000390:	4770      	bxgt	lr
 8000392:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000396:	f04f 0300 	mov.w	r3, #0
 800039a:	3a01      	subs	r2, #1
 800039c:	e737      	b.n	800020e <__aeabi_fmul+0x92>
 800039e:	f092 0f00 	teq	r2, #0
 80003a2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80003a6:	bf02      	ittt	eq
 80003a8:	0040      	lsleq	r0, r0, #1
 80003aa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80003ae:	3a01      	subeq	r2, #1
 80003b0:	d0f9      	beq.n	80003a6 <__aeabi_fdiv+0xc2>
 80003b2:	ea40 000c 	orr.w	r0, r0, ip
 80003b6:	f093 0f00 	teq	r3, #0
 80003ba:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80003be:	bf02      	ittt	eq
 80003c0:	0049      	lsleq	r1, r1, #1
 80003c2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80003c6:	3b01      	subeq	r3, #1
 80003c8:	d0f9      	beq.n	80003be <__aeabi_fdiv+0xda>
 80003ca:	ea41 010c 	orr.w	r1, r1, ip
 80003ce:	e795      	b.n	80002fc <__aeabi_fdiv+0x18>
 80003d0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80003d4:	ea92 0f0c 	teq	r2, ip
 80003d8:	d108      	bne.n	80003ec <__aeabi_fdiv+0x108>
 80003da:	0242      	lsls	r2, r0, #9
 80003dc:	f47f af7d 	bne.w	80002da <__aeabi_fmul+0x15e>
 80003e0:	ea93 0f0c 	teq	r3, ip
 80003e4:	f47f af70 	bne.w	80002c8 <__aeabi_fmul+0x14c>
 80003e8:	4608      	mov	r0, r1
 80003ea:	e776      	b.n	80002da <__aeabi_fmul+0x15e>
 80003ec:	ea93 0f0c 	teq	r3, ip
 80003f0:	d104      	bne.n	80003fc <__aeabi_fdiv+0x118>
 80003f2:	024b      	lsls	r3, r1, #9
 80003f4:	f43f af4c 	beq.w	8000290 <__aeabi_fmul+0x114>
 80003f8:	4608      	mov	r0, r1
 80003fa:	e76e      	b.n	80002da <__aeabi_fmul+0x15e>
 80003fc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000400:	bf18      	it	ne
 8000402:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000406:	d1ca      	bne.n	800039e <__aeabi_fdiv+0xba>
 8000408:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800040c:	f47f af5c 	bne.w	80002c8 <__aeabi_fmul+0x14c>
 8000410:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000414:	f47f af3c 	bne.w	8000290 <__aeabi_fmul+0x114>
 8000418:	e75f      	b.n	80002da <__aeabi_fmul+0x15e>
 800041a:	bf00      	nop

0800041c <__aeabi_f2iz>:
 800041c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000420:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000424:	d30f      	bcc.n	8000446 <__aeabi_f2iz+0x2a>
 8000426:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800042a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800042e:	d90d      	bls.n	800044c <__aeabi_f2iz+0x30>
 8000430:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000434:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000438:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800043c:	fa23 f002 	lsr.w	r0, r3, r2
 8000440:	bf18      	it	ne
 8000442:	4240      	negne	r0, r0
 8000444:	4770      	bx	lr
 8000446:	f04f 0000 	mov.w	r0, #0
 800044a:	4770      	bx	lr
 800044c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000450:	d101      	bne.n	8000456 <__aeabi_f2iz+0x3a>
 8000452:	0242      	lsls	r2, r0, #9
 8000454:	d105      	bne.n	8000462 <__aeabi_f2iz+0x46>
 8000456:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800045a:	bf08      	it	eq
 800045c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000460:	4770      	bx	lr
 8000462:	f04f 0000 	mov.w	r0, #0
 8000466:	4770      	bx	lr

08000468 <SetSysClock>:
void SetSysClock(void)
{
 8000468:	b480      	push	{r7}
 800046a:	b083      	sub	sp, #12
 800046c:	af00      	add	r7, sp, #0
	uint32_t status = 0;
 800046e:	2300      	movs	r3, #0
 8000470:	607b      	str	r3, [r7, #4]

  /* Enable HSI */
  RCC->CR |= (uint32_t)1;
 8000472:	4a3d      	ldr	r2, [pc, #244]	; (8000568 <SetSysClock+0x100>)
 8000474:	4b3c      	ldr	r3, [pc, #240]	; (8000568 <SetSysClock+0x100>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	f043 0301 	orr.w	r3, r3, #1
 800047c:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready and if Time out is reached exit */
 while(!(RCC->CR & (uint32_t)2)){} //CR bit 1 HSIRDY sets when HSI oscillator is stable. p141
 800047e:	bf00      	nop
 8000480:	4b39      	ldr	r3, [pc, #228]	; (8000568 <SetSysClock+0x100>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	f003 0302 	and.w	r3, r3, #2
 8000488:	2b00      	cmp	r3, #0
 800048a:	d0f9      	beq.n	8000480 <SetSysClock+0x18>

  if ((RCC->CR & (uint32_t)2) != 0) //if CR bit 1 HSIDRY high when oscillator is stable.
 800048c:	4b36      	ldr	r3, [pc, #216]	; (8000568 <SetSysClock+0x100>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	f003 0302 	and.w	r3, r3, #2
 8000494:	2b00      	cmp	r3, #0
 8000496:	d002      	beq.n	800049e <SetSysClock+0x36>
  {
    status = 1;
 8000498:	2301      	movs	r3, #1
 800049a:	607b      	str	r3, [r7, #4]
 800049c:	e001      	b.n	80004a2 <SetSysClock+0x3a>
  }
  else
  {
    status = 0;
 800049e:	2300      	movs	r3, #0
 80004a0:	607b      	str	r3, [r7, #4]
  }

  if (status == 1)
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	2b01      	cmp	r3, #1
 80004a6:	d10b      	bne.n	80004c0 <SetSysClock+0x58>
  {
    /*  PLL configuration: PLLCLK = (HSI * 4)/2 = 32 MHz */
	  //PLLSCR bit 16, PLLMUL bits 18-21, PLLDIV bits 22,23.
	  //0000 0000 1111 1101 0000 0000 0000 0000 corresponding bits
	  //these bits PLLSRC, PLLMUL and PLLDIV cleared
	  RCC->CFGR &= ~(0x00FD0000);
 80004a8:	4a2f      	ldr	r2, [pc, #188]	; (8000568 <SetSysClock+0x100>)
 80004aa:	4b2f      	ldr	r3, [pc, #188]	; (8000568 <SetSysClock+0x100>)
 80004ac:	689b      	ldr	r3, [r3, #8]
 80004ae:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 80004b2:	6093      	str	r3, [r2, #8]
	  //PLLMUL must be 0001 when multiplication=4 and PLLDIV must be 01 when division=2
	  //PLLSCR bit 16 must be 1 --> HSE oscillator clock selected as PLL input clock (done in previous line)
	  //0000 0000 0100 0100 0000 0000 0000 0000
	  RCC->CFGR |= 0x00440000;
 80004b4:	4a2c      	ldr	r2, [pc, #176]	; (8000568 <SetSysClock+0x100>)
 80004b6:	4b2c      	ldr	r3, [pc, #176]	; (8000568 <SetSysClock+0x100>)
 80004b8:	689b      	ldr	r3, [r3, #8]
 80004ba:	f443 0388 	orr.w	r3, r3, #4456448	; 0x440000
 80004be:	6093      	str	r3, [r2, #8]
    configuration. User can add here some code to deal with this error */
  }
  
  /*64-bit access is configured by setting the ACC64 bit in the Flash access control register (FLASH_ACR).
   *This access mode accelerates the execution of program operations.*/
  FLASH->ACR |= (uint32_t)4; //ACC64 bit 2, 64-bit access. 64-bit access is used to improve the performance. p84
 80004c0:	4a2a      	ldr	r2, [pc, #168]	; (800056c <SetSysClock+0x104>)
 80004c2:	4b2a      	ldr	r3, [pc, #168]	; (800056c <SetSysClock+0x104>)
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	f043 0304 	orr.w	r3, r3, #4
 80004ca:	6013      	str	r3, [r2, #0]
    /*Prefetch is enabled by setting the PRFTEN bit in the FLASH_ACR register.
    *This feature is useful if at least one wait state is needed to access the Flash memory.
	*Figure 5 shows the execution of sequential 32-bit instructions*/
  FLASH->ACR |= (uint32_t)2; //PRFTEN bit 1, prefetch enable. p84
 80004cc:	4a27      	ldr	r2, [pc, #156]	; (800056c <SetSysClock+0x104>)
 80004ce:	4b27      	ldr	r3, [pc, #156]	; (800056c <SetSysClock+0x104>)
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	f043 0302 	orr.w	r3, r3, #2
 80004d6:	6013      	str	r3, [r2, #0]
  FLASH->ACR |= (uint32_t)1; //LATENCY one wait state bit 0. One wait state enabled. p84. p59
 80004d8:	4a24      	ldr	r2, [pc, #144]	; (800056c <SetSysClock+0x104>)
 80004da:	4b24      	ldr	r3, [pc, #144]	; (800056c <SetSysClock+0x104>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	f043 0301 	orr.w	r3, r3, #1
 80004e2:	6013      	str	r3, [r2, #0]

  RCC->APB1ENR |= 0x10000000; //bit 28 PWREN: Power interface clock enable. p158. p101
 80004e4:	4a20      	ldr	r2, [pc, #128]	; (8000568 <SetSysClock+0x100>)
 80004e6:	4b20      	ldr	r3, [pc, #128]	; (8000568 <SetSysClock+0x100>)
 80004e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004ee:	6253      	str	r3, [r2, #36]	; 0x24
  PWR->CR = (uint32_t)(1<<11); //Bits 12:11 VOS[1:0]: Voltage scaling range selection, 01: 1.8 V (range 1). p121
 80004f0:	4b1f      	ldr	r3, [pc, #124]	; (8000570 <SetSysClock+0x108>)
 80004f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80004f6:	601a      	str	r2, [r3, #0]
	of PWR_CR register. p102 1.8V needed for 32 MHz clock and lower voltages to save power.

	0: Regulator is ready in the selected voltage range
	1: Regulator voltage output is changing to the required VOS level.
	*/
  while((PWR->CSR & (uint32_t)(1<<4)) != 0){} //bit 4 VOSF: Voltage Scaling select flag. p125
 80004f8:	bf00      	nop
 80004fa:	4b1d      	ldr	r3, [pc, #116]	; (8000570 <SetSysClock+0x108>)
 80004fc:	685b      	ldr	r3, [r3, #4]
 80004fe:	f003 0310 	and.w	r3, r3, #16
 8000502:	2b00      	cmp	r3, #0
 8000504:	d1f9      	bne.n	80004fa <SetSysClock+0x92>
    
  RCC->CFGR &=(uint32_t)~(1<<7); //Bits 7:4 HPRE[3:0]: AHB prescaler. 0xxx: SYSCLK not divided. p144
 8000506:	4a18      	ldr	r2, [pc, #96]	; (8000568 <SetSysClock+0x100>)
 8000508:	4b17      	ldr	r3, [pc, #92]	; (8000568 <SetSysClock+0x100>)
 800050a:	689b      	ldr	r3, [r3, #8]
 800050c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000510:	6093      	str	r3, [r2, #8]
  RCC->CFGR &=(uint32_t)~(1<<13); //Bits 13:11 PPRE2[2:0]: APB high-speed prescaler (APB2). p144
 8000512:	4a15      	ldr	r2, [pc, #84]	; (8000568 <SetSysClock+0x100>)
 8000514:	4b14      	ldr	r3, [pc, #80]	; (8000568 <SetSysClock+0x100>)
 8000516:	689b      	ldr	r3, [r3, #8]
 8000518:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800051c:	6093      	str	r3, [r2, #8]
  RCC->CFGR &=(uint32_t)~(1<<10); //Bits 10:8 PPRE1[2:0]: APB low-speed prescaler (APB1)p. 144
 800051e:	4a12      	ldr	r2, [pc, #72]	; (8000568 <SetSysClock+0x100>)
 8000520:	4b11      	ldr	r3, [pc, #68]	; (8000568 <SetSysClock+0x100>)
 8000522:	689b      	ldr	r3, [r3, #8]
 8000524:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000528:	6093      	str	r3, [r2, #8]

  RCC->CR |= (1<<24); //Bit 24 PLLON: PLL enable. p140
 800052a:	4a0f      	ldr	r2, [pc, #60]	; (8000568 <SetSysClock+0x100>)
 800052c:	4b0e      	ldr	r3, [pc, #56]	; (8000568 <SetSysClock+0x100>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000534:	6013      	str	r3, [r2, #0]
  while((RCC->CR & (uint32_t)(1<<25)) == 0){} //Bit 25 PLLRDY: PLL clock ready flag. p140
 8000536:	bf00      	nop
 8000538:	4b0b      	ldr	r3, [pc, #44]	; (8000568 <SetSysClock+0x100>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000540:	2b00      	cmp	r3, #0
 8000542:	d0f9      	beq.n	8000538 <SetSysClock+0xd0>
    
  /* Select PLL as system clock source */
  RCC->CFGR |= (uint32_t)3; //Bits 1:0 SW[1:0]: System clock switch, 11: PLL used as system clock
 8000544:	4a08      	ldr	r2, [pc, #32]	; (8000568 <SetSysClock+0x100>)
 8000546:	4b08      	ldr	r3, [pc, #32]	; (8000568 <SetSysClock+0x100>)
 8000548:	689b      	ldr	r3, [r3, #8]
 800054a:	f043 0303 	orr.w	r3, r3, #3
 800054e:	6093      	str	r3, [r2, #8]
    
  /*Bits 3:2 SWS[1:0]: System clock switch status, 11: PLL used as system clock.
   * These bits are set and cleared by hardware to indicate which clock source is used as
	system clock. 11: PLL used as system clock. p145.
   */
  while ((RCC->CFGR & (uint32_t)(3<<2))==0){}
 8000550:	bf00      	nop
 8000552:	4b05      	ldr	r3, [pc, #20]	; (8000568 <SetSysClock+0x100>)
 8000554:	689b      	ldr	r3, [r3, #8]
 8000556:	f003 030c 	and.w	r3, r3, #12
 800055a:	2b00      	cmp	r3, #0
 800055c:	d0f9      	beq.n	8000552 <SetSysClock+0xea>
 800055e:	bf00      	nop
 8000560:	370c      	adds	r7, #12
 8000562:	46bd      	mov	sp, r7
 8000564:	bc80      	pop	{r7}
 8000566:	4770      	bx	lr
 8000568:	40023800 	.word	0x40023800
 800056c:	40023c00 	.word	0x40023c00
 8000570:	40007000 	.word	0x40007000

08000574 <main>:
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b0a0      	sub	sp, #128	; 0x80
 8000578:	af00      	add	r7, sp, #0
  /* Configure the system clock to 32 MHz and update SystemCoreClock */
  SetSysClock();
 800057a:	f7ff ff75 	bl	8000468 <SetSysClock>
  SystemCoreClockUpdate();
 800057e:	f000 f8dd 	bl	800073c <SystemCoreClockUpdate>
  USART2_Init();
 8000582:	f000 fa79 	bl	8000a78 <USART2_Init>
  /* TODO - Add your application code here */

float value=34.54;
 8000586:	4b2d      	ldr	r3, [pc, #180]	; (800063c <main+0xc8>)
 8000588:	677b      	str	r3, [r7, #116]	; 0x74
int temp_degree=0;
 800058a:	2300      	movs	r3, #0
 800058c:	673b      	str	r3, [r7, #112]	; 0x70
float temp=0;
 800058e:	f04f 0300 	mov.w	r3, #0
 8000592:	66fb      	str	r3, [r7, #108]	; 0x6c
int temp_decimals=0;
 8000594:	2300      	movs	r3, #0
 8000596:	66bb      	str	r3, [r7, #104]	; 0x68
char buf[100];

	  temp=value*100; //remove decimals and 34.54 = 3454
 8000598:	4929      	ldr	r1, [pc, #164]	; (8000640 <main+0xcc>)
 800059a:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800059c:	f7ff fdee 	bl	800017c <__aeabi_fmul>
 80005a0:	4603      	mov	r3, r0
 80005a2:	66fb      	str	r3, [r7, #108]	; 0x6c
      temp_degree=(int)temp/100;
 80005a4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80005a6:	f7ff ff39 	bl	800041c <__aeabi_f2iz>
 80005aa:	4603      	mov	r3, r0
 80005ac:	4a25      	ldr	r2, [pc, #148]	; (8000644 <main+0xd0>)
 80005ae:	fb82 1203 	smull	r1, r2, r2, r3
 80005b2:	1152      	asrs	r2, r2, #5
 80005b4:	17db      	asrs	r3, r3, #31
 80005b6:	1ad3      	subs	r3, r2, r3
 80005b8:	673b      	str	r3, [r7, #112]	; 0x70
      temp_decimals=abs((int)temp%100);
 80005ba:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80005bc:	f7ff ff2e 	bl	800041c <__aeabi_f2iz>
 80005c0:	4602      	mov	r2, r0
 80005c2:	4b20      	ldr	r3, [pc, #128]	; (8000644 <main+0xd0>)
 80005c4:	fb83 1302 	smull	r1, r3, r3, r2
 80005c8:	1159      	asrs	r1, r3, #5
 80005ca:	17d3      	asrs	r3, r2, #31
 80005cc:	1acb      	subs	r3, r1, r3
 80005ce:	2164      	movs	r1, #100	; 0x64
 80005d0:	fb01 f303 	mul.w	r3, r1, r3
 80005d4:	1ad3      	subs	r3, r2, r3
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	bfb8      	it	lt
 80005da:	425b      	neglt	r3, r3
 80005dc:	66bb      	str	r3, [r7, #104]	; 0x68
	  sprintf(buf,"%d.%d Celcius",temp_degree,temp_decimals);
 80005de:	1d38      	adds	r0, r7, #4
 80005e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80005e2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80005e4:	4918      	ldr	r1, [pc, #96]	; (8000648 <main+0xd4>)
 80005e6:	f000 fa30 	bl	8000a4a <siprintf>

int len=0;
 80005ea:	2300      	movs	r3, #0
 80005ec:	67fb      	str	r3, [r7, #124]	; 0x7c
while(buf[len]!='\0')
 80005ee:	e002      	b.n	80005f6 <main+0x82>
	len++;
 80005f0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80005f2:	3301      	adds	r3, #1
 80005f4:	67fb      	str	r3, [r7, #124]	; 0x7c
while(buf[len]!='\0')
 80005f6:	1d3a      	adds	r2, r7, #4
 80005f8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80005fa:	4413      	add	r3, r2
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d1f6      	bne.n	80005f0 <main+0x7c>


  /* Infinite loop */
  while (1)
  {
		delay_Ms(1000);
 8000602:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000606:	f000 f821 	bl	800064c <delay_Ms>
				for(int i=0;i<len;i++)
 800060a:	2300      	movs	r3, #0
 800060c:	67bb      	str	r3, [r7, #120]	; 0x78
 800060e:	e009      	b.n	8000624 <main+0xb0>
		{
			USART2_write(buf[i]);
 8000610:	1d3a      	adds	r2, r7, #4
 8000612:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000614:	4413      	add	r3, r2
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	4618      	mov	r0, r3
 800061a:	f000 fa75 	bl	8000b08 <USART2_write>
				for(int i=0;i<len;i++)
 800061e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000620:	3301      	adds	r3, #1
 8000622:	67bb      	str	r3, [r7, #120]	; 0x78
 8000624:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8000626:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000628:	429a      	cmp	r2, r3
 800062a:	dbf1      	blt.n	8000610 <main+0x9c>
		}

		USART2_write('\n');
 800062c:	200a      	movs	r0, #10
 800062e:	f000 fa6b 	bl	8000b08 <USART2_write>
		USART2_write('\r');
 8000632:	200d      	movs	r0, #13
 8000634:	f000 fa68 	bl	8000b08 <USART2_write>
		delay_Ms(1000);
 8000638:	e7e3      	b.n	8000602 <main+0x8e>
 800063a:	bf00      	nop
 800063c:	420a28f6 	.word	0x420a28f6
 8000640:	42c80000 	.word	0x42c80000
 8000644:	51eb851f 	.word	0x51eb851f
 8000648:	08000b94 	.word	0x08000b94

0800064c <delay_Ms>:
  }
  return 0;
}

void delay_Ms(int delay)
{
 800064c:	b480      	push	{r7}
 800064e:	b085      	sub	sp, #20
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
	int i=0;
 8000654:	2300      	movs	r3, #0
 8000656:	60fb      	str	r3, [r7, #12]
	for(; delay>0;delay--)
 8000658:	e00d      	b.n	8000676 <delay_Ms+0x2a>
		for(i=0;i<2460;i++); //measured with oscilloscope
 800065a:	2300      	movs	r3, #0
 800065c:	60fb      	str	r3, [r7, #12]
 800065e:	e002      	b.n	8000666 <delay_Ms+0x1a>
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	3301      	adds	r3, #1
 8000664:	60fb      	str	r3, [r7, #12]
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	f640 129b 	movw	r2, #2459	; 0x99b
 800066c:	4293      	cmp	r3, r2
 800066e:	ddf7      	ble.n	8000660 <delay_Ms+0x14>
	for(; delay>0;delay--)
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	3b01      	subs	r3, #1
 8000674:	607b      	str	r3, [r7, #4]
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	2b00      	cmp	r3, #0
 800067a:	dcee      	bgt.n	800065a <delay_Ms+0xe>
}
 800067c:	bf00      	nop
 800067e:	3714      	adds	r7, #20
 8000680:	46bd      	mov	sp, r7
 8000682:	bc80      	pop	{r7}
 8000684:	4770      	bx	lr
	...

08000688 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000688:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800068a:	e003      	b.n	8000694 <LoopCopyDataInit>

0800068c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800068c:	4b0b      	ldr	r3, [pc, #44]	; (80006bc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800068e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000690:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000692:	3104      	adds	r1, #4

08000694 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000694:	480a      	ldr	r0, [pc, #40]	; (80006c0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000696:	4b0b      	ldr	r3, [pc, #44]	; (80006c4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000698:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800069a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800069c:	d3f6      	bcc.n	800068c <CopyDataInit>
  ldr r2, =_sbss
 800069e:	4a0a      	ldr	r2, [pc, #40]	; (80006c8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80006a0:	e002      	b.n	80006a8 <LoopFillZerobss>

080006a2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80006a2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80006a4:	f842 3b04 	str.w	r3, [r2], #4

080006a8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80006a8:	4b08      	ldr	r3, [pc, #32]	; (80006cc <LoopFillZerobss+0x24>)
  cmp r2, r3
 80006aa:	429a      	cmp	r2, r3
  bcc FillZerobss
 80006ac:	d3f9      	bcc.n	80006a2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80006ae:	f000 f811 	bl	80006d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006b2:	f000 fa3f 	bl	8000b34 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006b6:	f7ff ff5d 	bl	8000574 <main>
  bx lr
 80006ba:	4770      	bx	lr
  ldr r3, =_sidata
 80006bc:	08000bc8 	.word	0x08000bc8
  ldr r0, =_sdata
 80006c0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80006c4:	20000004 	.word	0x20000004
  ldr r2, =_sbss
 80006c8:	20000004 	.word	0x20000004
  ldr r3, = _ebss
 80006cc:	20000020 	.word	0x20000020

080006d0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006d0:	e7fe      	b.n	80006d0 <ADC1_IRQHandler>
	...

080006d4 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 80006d8:	4a15      	ldr	r2, [pc, #84]	; (8000730 <SystemInit+0x5c>)
 80006da:	4b15      	ldr	r3, [pc, #84]	; (8000730 <SystemInit+0x5c>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006e2:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 80006e4:	4912      	ldr	r1, [pc, #72]	; (8000730 <SystemInit+0x5c>)
 80006e6:	4b12      	ldr	r3, [pc, #72]	; (8000730 <SystemInit+0x5c>)
 80006e8:	689a      	ldr	r2, [r3, #8]
 80006ea:	4b12      	ldr	r3, [pc, #72]	; (8000734 <SystemInit+0x60>)
 80006ec:	4013      	ands	r3, r2
 80006ee:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 80006f0:	4a0f      	ldr	r2, [pc, #60]	; (8000730 <SystemInit+0x5c>)
 80006f2:	4b0f      	ldr	r3, [pc, #60]	; (8000730 <SystemInit+0x5c>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 80006fa:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 80006fe:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000700:	4a0b      	ldr	r2, [pc, #44]	; (8000730 <SystemInit+0x5c>)
 8000702:	4b0b      	ldr	r3, [pc, #44]	; (8000730 <SystemInit+0x5c>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800070a:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 800070c:	4a08      	ldr	r2, [pc, #32]	; (8000730 <SystemInit+0x5c>)
 800070e:	4b08      	ldr	r3, [pc, #32]	; (8000730 <SystemInit+0x5c>)
 8000710:	689b      	ldr	r3, [r3, #8]
 8000712:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 8000716:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000718:	4b05      	ldr	r3, [pc, #20]	; (8000730 <SystemInit+0x5c>)
 800071a:	2200      	movs	r2, #0
 800071c:	60da      	str	r2, [r3, #12]
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800071e:	4b06      	ldr	r3, [pc, #24]	; (8000738 <SystemInit+0x64>)
 8000720:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000724:	609a      	str	r2, [r3, #8]
#endif
}
 8000726:	bf00      	nop
 8000728:	46bd      	mov	sp, r7
 800072a:	bc80      	pop	{r7}
 800072c:	4770      	bx	lr
 800072e:	bf00      	nop
 8000730:	40023800 	.word	0x40023800
 8000734:	88ffc00c 	.word	0x88ffc00c
 8000738:	e000ed00 	.word	0xe000ed00

0800073c <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 800073c:	b480      	push	{r7}
 800073e:	b087      	sub	sp, #28
 8000740:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmul = 0, plldiv = 0, pllsource = 0, msirange = 0;
 8000742:	2300      	movs	r3, #0
 8000744:	617b      	str	r3, [r7, #20]
 8000746:	2300      	movs	r3, #0
 8000748:	613b      	str	r3, [r7, #16]
 800074a:	2300      	movs	r3, #0
 800074c:	60fb      	str	r3, [r7, #12]
 800074e:	2300      	movs	r3, #0
 8000750:	60bb      	str	r3, [r7, #8]
 8000752:	2300      	movs	r3, #0
 8000754:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000756:	4b48      	ldr	r3, [pc, #288]	; (8000878 <SystemCoreClockUpdate+0x13c>)
 8000758:	689b      	ldr	r3, [r3, #8]
 800075a:	f003 030c 	and.w	r3, r3, #12
 800075e:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
 8000760:	697b      	ldr	r3, [r7, #20]
 8000762:	2b0c      	cmp	r3, #12
 8000764:	d863      	bhi.n	800082e <SystemCoreClockUpdate+0xf2>
 8000766:	a201      	add	r2, pc, #4	; (adr r2, 800076c <SystemCoreClockUpdate+0x30>)
 8000768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800076c:	080007a1 	.word	0x080007a1
 8000770:	0800082f 	.word	0x0800082f
 8000774:	0800082f 	.word	0x0800082f
 8000778:	0800082f 	.word	0x0800082f
 800077c:	080007c1 	.word	0x080007c1
 8000780:	0800082f 	.word	0x0800082f
 8000784:	0800082f 	.word	0x0800082f
 8000788:	0800082f 	.word	0x0800082f
 800078c:	080007c9 	.word	0x080007c9
 8000790:	0800082f 	.word	0x0800082f
 8000794:	0800082f 	.word	0x0800082f
 8000798:	0800082f 	.word	0x0800082f
 800079c:	080007d1 	.word	0x080007d1
  {
    case 0x00:  /* MSI used as system clock */
      msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE) >> 13;
 80007a0:	4b35      	ldr	r3, [pc, #212]	; (8000878 <SystemCoreClockUpdate+0x13c>)
 80007a2:	685b      	ldr	r3, [r3, #4]
 80007a4:	0b5b      	lsrs	r3, r3, #13
 80007a6:	f003 0307 	and.w	r3, r3, #7
 80007aa:	607b      	str	r3, [r7, #4]
      SystemCoreClock = (32768 * (1 << (msirange + 1)));
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	3301      	adds	r3, #1
 80007b0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80007b4:	fa02 f303 	lsl.w	r3, r2, r3
 80007b8:	461a      	mov	r2, r3
 80007ba:	4b30      	ldr	r3, [pc, #192]	; (800087c <SystemCoreClockUpdate+0x140>)
 80007bc:	601a      	str	r2, [r3, #0]
      break;
 80007be:	e046      	b.n	800084e <SystemCoreClockUpdate+0x112>
    case 0x04:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 80007c0:	4b2e      	ldr	r3, [pc, #184]	; (800087c <SystemCoreClockUpdate+0x140>)
 80007c2:	4a2f      	ldr	r2, [pc, #188]	; (8000880 <SystemCoreClockUpdate+0x144>)
 80007c4:	601a      	str	r2, [r3, #0]
      break;
 80007c6:	e042      	b.n	800084e <SystemCoreClockUpdate+0x112>
    case 0x08:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 80007c8:	4b2c      	ldr	r3, [pc, #176]	; (800087c <SystemCoreClockUpdate+0x140>)
 80007ca:	4a2d      	ldr	r2, [pc, #180]	; (8000880 <SystemCoreClockUpdate+0x144>)
 80007cc:	601a      	str	r2, [r3, #0]
      break;
 80007ce:	e03e      	b.n	800084e <SystemCoreClockUpdate+0x112>
    case 0x0C:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
 80007d0:	4b29      	ldr	r3, [pc, #164]	; (8000878 <SystemCoreClockUpdate+0x13c>)
 80007d2:	689b      	ldr	r3, [r3, #8]
 80007d4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80007d8:	613b      	str	r3, [r7, #16]
      plldiv = RCC->CFGR & RCC_CFGR_PLLDIV;
 80007da:	4b27      	ldr	r3, [pc, #156]	; (8000878 <SystemCoreClockUpdate+0x13c>)
 80007dc:	689b      	ldr	r3, [r3, #8]
 80007de:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80007e2:	60fb      	str	r3, [r7, #12]
      pllmul = PLLMulTable[(pllmul >> 18)];
 80007e4:	693b      	ldr	r3, [r7, #16]
 80007e6:	0c9b      	lsrs	r3, r3, #18
 80007e8:	4a26      	ldr	r2, [pc, #152]	; (8000884 <SystemCoreClockUpdate+0x148>)
 80007ea:	5cd3      	ldrb	r3, [r2, r3]
 80007ec:	613b      	str	r3, [r7, #16]
      plldiv = (plldiv >> 22) + 1;
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	0d9b      	lsrs	r3, r3, #22
 80007f2:	3301      	adds	r3, #1
 80007f4:	60fb      	str	r3, [r7, #12]
      
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 80007f6:	4b20      	ldr	r3, [pc, #128]	; (8000878 <SystemCoreClockUpdate+0x13c>)
 80007f8:	689b      	ldr	r3, [r3, #8]
 80007fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80007fe:	60bb      	str	r3, [r7, #8]

      if (pllsource == 0x00)
 8000800:	68bb      	ldr	r3, [r7, #8]
 8000802:	2b00      	cmp	r3, #0
 8000804:	d109      	bne.n	800081a <SystemCoreClockUpdate+0xde>
      {
        /* HSI oscillator clock selected as PLL clock entry */
        SystemCoreClock = (((HSI_VALUE) * pllmul) / plldiv);
 8000806:	693b      	ldr	r3, [r7, #16]
 8000808:	4a1d      	ldr	r2, [pc, #116]	; (8000880 <SystemCoreClockUpdate+0x144>)
 800080a:	fb02 f203 	mul.w	r2, r2, r3
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	fbb2 f3f3 	udiv	r3, r2, r3
 8000814:	4a19      	ldr	r2, [pc, #100]	; (800087c <SystemCoreClockUpdate+0x140>)
 8000816:	6013      	str	r3, [r2, #0]
      else
      {
        /* HSE selected as PLL clock entry */
        SystemCoreClock = (((HSE_VALUE) * pllmul) / plldiv);
      }
      break;
 8000818:	e019      	b.n	800084e <SystemCoreClockUpdate+0x112>
        SystemCoreClock = (((HSE_VALUE) * pllmul) / plldiv);
 800081a:	693b      	ldr	r3, [r7, #16]
 800081c:	4a18      	ldr	r2, [pc, #96]	; (8000880 <SystemCoreClockUpdate+0x144>)
 800081e:	fb02 f203 	mul.w	r2, r2, r3
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	fbb2 f3f3 	udiv	r3, r2, r3
 8000828:	4a14      	ldr	r2, [pc, #80]	; (800087c <SystemCoreClockUpdate+0x140>)
 800082a:	6013      	str	r3, [r2, #0]
      break;
 800082c:	e00f      	b.n	800084e <SystemCoreClockUpdate+0x112>
    default: /* MSI used as system clock */
      msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE) >> 13;
 800082e:	4b12      	ldr	r3, [pc, #72]	; (8000878 <SystemCoreClockUpdate+0x13c>)
 8000830:	685b      	ldr	r3, [r3, #4]
 8000832:	0b5b      	lsrs	r3, r3, #13
 8000834:	f003 0307 	and.w	r3, r3, #7
 8000838:	607b      	str	r3, [r7, #4]
      SystemCoreClock = (32768 * (1 << (msirange + 1)));
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	3301      	adds	r3, #1
 800083e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000842:	fa02 f303 	lsl.w	r3, r2, r3
 8000846:	461a      	mov	r2, r3
 8000848:	4b0c      	ldr	r3, [pc, #48]	; (800087c <SystemCoreClockUpdate+0x140>)
 800084a:	601a      	str	r2, [r3, #0]
      break;
 800084c:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800084e:	4b0a      	ldr	r3, [pc, #40]	; (8000878 <SystemCoreClockUpdate+0x13c>)
 8000850:	689b      	ldr	r3, [r3, #8]
 8000852:	091b      	lsrs	r3, r3, #4
 8000854:	f003 030f 	and.w	r3, r3, #15
 8000858:	4a0b      	ldr	r2, [pc, #44]	; (8000888 <SystemCoreClockUpdate+0x14c>)
 800085a:	5cd3      	ldrb	r3, [r2, r3]
 800085c:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 800085e:	4b07      	ldr	r3, [pc, #28]	; (800087c <SystemCoreClockUpdate+0x140>)
 8000860:	681a      	ldr	r2, [r3, #0]
 8000862:	697b      	ldr	r3, [r7, #20]
 8000864:	fa22 f303 	lsr.w	r3, r2, r3
 8000868:	4a04      	ldr	r2, [pc, #16]	; (800087c <SystemCoreClockUpdate+0x140>)
 800086a:	6013      	str	r3, [r2, #0]
}
 800086c:	bf00      	nop
 800086e:	371c      	adds	r7, #28
 8000870:	46bd      	mov	sp, r7
 8000872:	bc80      	pop	{r7}
 8000874:	4770      	bx	lr
 8000876:	bf00      	nop
 8000878:	40023800 	.word	0x40023800
 800087c:	20000000 	.word	0x20000000
 8000880:	007a1200 	.word	0x007a1200
 8000884:	08000ba4 	.word	0x08000ba4
 8000888:	08000bb0 	.word	0x08000bb0

0800088c <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 800088c:	b480      	push	{r7}
 800088e:	b087      	sub	sp, #28
 8000890:	af00      	add	r7, sp, #0
 8000892:	60f8      	str	r0, [r7, #12]
 8000894:	60b9      	str	r1, [r7, #8]
 8000896:	607a      	str	r2, [r7, #4]
	int div = 1;
 8000898:	2301      	movs	r3, #1
 800089a:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 800089c:	e004      	b.n	80008a8 <ts_itoa+0x1c>
		div *= base;
 800089e:	697b      	ldr	r3, [r7, #20]
 80008a0:	687a      	ldr	r2, [r7, #4]
 80008a2:	fb02 f303 	mul.w	r3, r2, r3
 80008a6:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 80008a8:	697b      	ldr	r3, [r7, #20]
 80008aa:	68ba      	ldr	r2, [r7, #8]
 80008ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	429a      	cmp	r2, r3
 80008b4:	d2f3      	bcs.n	800089e <ts_itoa+0x12>

	while (div != 0)
 80008b6:	e029      	b.n	800090c <ts_itoa+0x80>
	{
		int num = d/div;
 80008b8:	697b      	ldr	r3, [r7, #20]
 80008ba:	68ba      	ldr	r2, [r7, #8]
 80008bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80008c0:	613b      	str	r3, [r7, #16]
		d = d%div;
 80008c2:	697a      	ldr	r2, [r7, #20]
 80008c4:	68bb      	ldr	r3, [r7, #8]
 80008c6:	fbb3 f1f2 	udiv	r1, r3, r2
 80008ca:	fb02 f201 	mul.w	r2, r2, r1
 80008ce:	1a9b      	subs	r3, r3, r2
 80008d0:	60bb      	str	r3, [r7, #8]
		div /= base;
 80008d2:	697a      	ldr	r2, [r7, #20]
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	fb92 f3f3 	sdiv	r3, r2, r3
 80008da:	617b      	str	r3, [r7, #20]
		if (num > 9)
 80008dc:	693b      	ldr	r3, [r7, #16]
 80008de:	2b09      	cmp	r3, #9
 80008e0:	dd0a      	ble.n	80008f8 <ts_itoa+0x6c>
			*((*buf)++) = (num-10) + 'A';
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	1c59      	adds	r1, r3, #1
 80008e8:	68fa      	ldr	r2, [r7, #12]
 80008ea:	6011      	str	r1, [r2, #0]
 80008ec:	693a      	ldr	r2, [r7, #16]
 80008ee:	b2d2      	uxtb	r2, r2
 80008f0:	3237      	adds	r2, #55	; 0x37
 80008f2:	b2d2      	uxtb	r2, r2
 80008f4:	701a      	strb	r2, [r3, #0]
 80008f6:	e009      	b.n	800090c <ts_itoa+0x80>
		else
			*((*buf)++) = num + '0';
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	1c59      	adds	r1, r3, #1
 80008fe:	68fa      	ldr	r2, [r7, #12]
 8000900:	6011      	str	r1, [r2, #0]
 8000902:	693a      	ldr	r2, [r7, #16]
 8000904:	b2d2      	uxtb	r2, r2
 8000906:	3230      	adds	r2, #48	; 0x30
 8000908:	b2d2      	uxtb	r2, r2
 800090a:	701a      	strb	r2, [r3, #0]
	while (div != 0)
 800090c:	697b      	ldr	r3, [r7, #20]
 800090e:	2b00      	cmp	r3, #0
 8000910:	d1d2      	bne.n	80008b8 <ts_itoa+0x2c>
	}
}
 8000912:	bf00      	nop
 8000914:	371c      	adds	r7, #28
 8000916:	46bd      	mov	sp, r7
 8000918:	bc80      	pop	{r7}
 800091a:	4770      	bx	lr

0800091c <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b088      	sub	sp, #32
 8000920:	af00      	add	r7, sp, #0
 8000922:	60f8      	str	r0, [r7, #12]
 8000924:	60b9      	str	r1, [r7, #8]
 8000926:	607a      	str	r2, [r7, #4]
	char *start_buf = buf;
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	617b      	str	r3, [r7, #20]
	while(*fmt)
 800092c:	e07d      	b.n	8000a2a <ts_formatstring+0x10e>
	{
		/* Character needs formating? */
		if (*fmt == '%')
 800092e:	68bb      	ldr	r3, [r7, #8]
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	2b25      	cmp	r3, #37	; 0x25
 8000934:	d171      	bne.n	8000a1a <ts_formatstring+0xfe>
		{
			switch (*(++fmt))
 8000936:	68bb      	ldr	r3, [r7, #8]
 8000938:	3301      	adds	r3, #1
 800093a:	60bb      	str	r3, [r7, #8]
 800093c:	68bb      	ldr	r3, [r7, #8]
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	2b64      	cmp	r3, #100	; 0x64
 8000942:	d01e      	beq.n	8000982 <ts_formatstring+0x66>
 8000944:	2b64      	cmp	r3, #100	; 0x64
 8000946:	dc06      	bgt.n	8000956 <ts_formatstring+0x3a>
 8000948:	2b58      	cmp	r3, #88	; 0x58
 800094a:	d050      	beq.n	80009ee <ts_formatstring+0xd2>
 800094c:	2b63      	cmp	r3, #99	; 0x63
 800094e:	d00e      	beq.n	800096e <ts_formatstring+0x52>
 8000950:	2b25      	cmp	r3, #37	; 0x25
 8000952:	d058      	beq.n	8000a06 <ts_formatstring+0xea>
 8000954:	e05d      	b.n	8000a12 <ts_formatstring+0xf6>
 8000956:	2b73      	cmp	r3, #115	; 0x73
 8000958:	d02b      	beq.n	80009b2 <ts_formatstring+0x96>
 800095a:	2b73      	cmp	r3, #115	; 0x73
 800095c:	dc02      	bgt.n	8000964 <ts_formatstring+0x48>
 800095e:	2b69      	cmp	r3, #105	; 0x69
 8000960:	d00f      	beq.n	8000982 <ts_formatstring+0x66>
 8000962:	e056      	b.n	8000a12 <ts_formatstring+0xf6>
 8000964:	2b75      	cmp	r3, #117	; 0x75
 8000966:	d037      	beq.n	80009d8 <ts_formatstring+0xbc>
 8000968:	2b78      	cmp	r3, #120	; 0x78
 800096a:	d040      	beq.n	80009ee <ts_formatstring+0xd2>
 800096c:	e051      	b.n	8000a12 <ts_formatstring+0xf6>
			{
			  case 'c':
				*buf++ = va_arg(va, int);
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	1c5a      	adds	r2, r3, #1
 8000972:	60fa      	str	r2, [r7, #12]
 8000974:	687a      	ldr	r2, [r7, #4]
 8000976:	1d11      	adds	r1, r2, #4
 8000978:	6079      	str	r1, [r7, #4]
 800097a:	6812      	ldr	r2, [r2, #0]
 800097c:	b2d2      	uxtb	r2, r2
 800097e:	701a      	strb	r2, [r3, #0]
				break;
 8000980:	e047      	b.n	8000a12 <ts_formatstring+0xf6>
			  case 'd':
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	1d1a      	adds	r2, r3, #4
 8000986:	607a      	str	r2, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	61fb      	str	r3, [r7, #28]
					if (val < 0)
 800098c:	69fb      	ldr	r3, [r7, #28]
 800098e:	2b00      	cmp	r3, #0
 8000990:	da07      	bge.n	80009a2 <ts_formatstring+0x86>
					{
						val *= -1;
 8000992:	69fb      	ldr	r3, [r7, #28]
 8000994:	425b      	negs	r3, r3
 8000996:	61fb      	str	r3, [r7, #28]
						*buf++ = '-';
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	1c5a      	adds	r2, r3, #1
 800099c:	60fa      	str	r2, [r7, #12]
 800099e:	222d      	movs	r2, #45	; 0x2d
 80009a0:	701a      	strb	r2, [r3, #0]
					}
					ts_itoa(&buf, val, 10);
 80009a2:	69f9      	ldr	r1, [r7, #28]
 80009a4:	f107 030c 	add.w	r3, r7, #12
 80009a8:	220a      	movs	r2, #10
 80009aa:	4618      	mov	r0, r3
 80009ac:	f7ff ff6e 	bl	800088c <ts_itoa>
				}
				break;
 80009b0:	e02f      	b.n	8000a12 <ts_formatstring+0xf6>
			  case 's':
				{
					char * arg = va_arg(va, char *);
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	1d1a      	adds	r2, r3, #4
 80009b6:	607a      	str	r2, [r7, #4]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	61bb      	str	r3, [r7, #24]
					while (*arg)
 80009bc:	e007      	b.n	80009ce <ts_formatstring+0xb2>
					{
						*buf++ = *arg++;
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	1c5a      	adds	r2, r3, #1
 80009c2:	60fa      	str	r2, [r7, #12]
 80009c4:	69ba      	ldr	r2, [r7, #24]
 80009c6:	1c51      	adds	r1, r2, #1
 80009c8:	61b9      	str	r1, [r7, #24]
 80009ca:	7812      	ldrb	r2, [r2, #0]
 80009cc:	701a      	strb	r2, [r3, #0]
					while (*arg)
 80009ce:	69bb      	ldr	r3, [r7, #24]
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d1f3      	bne.n	80009be <ts_formatstring+0xa2>
					}
				}
				break;
 80009d6:	e01c      	b.n	8000a12 <ts_formatstring+0xf6>
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	1d1a      	adds	r2, r3, #4
 80009dc:	607a      	str	r2, [r7, #4]
 80009de:	6819      	ldr	r1, [r3, #0]
 80009e0:	f107 030c 	add.w	r3, r7, #12
 80009e4:	220a      	movs	r2, #10
 80009e6:	4618      	mov	r0, r3
 80009e8:	f7ff ff50 	bl	800088c <ts_itoa>
				break;
 80009ec:	e011      	b.n	8000a12 <ts_formatstring+0xf6>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	1d1a      	adds	r2, r3, #4
 80009f2:	607a      	str	r2, [r7, #4]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	4619      	mov	r1, r3
 80009f8:	f107 030c 	add.w	r3, r7, #12
 80009fc:	2210      	movs	r2, #16
 80009fe:	4618      	mov	r0, r3
 8000a00:	f7ff ff44 	bl	800088c <ts_itoa>
				break;
 8000a04:	e005      	b.n	8000a12 <ts_formatstring+0xf6>
			  case '%':
				  *buf++ = '%';
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	1c5a      	adds	r2, r3, #1
 8000a0a:	60fa      	str	r2, [r7, #12]
 8000a0c:	2225      	movs	r2, #37	; 0x25
 8000a0e:	701a      	strb	r2, [r3, #0]
				  break;
 8000a10:	bf00      	nop
			}
			fmt++;
 8000a12:	68bb      	ldr	r3, [r7, #8]
 8000a14:	3301      	adds	r3, #1
 8000a16:	60bb      	str	r3, [r7, #8]
 8000a18:	e007      	b.n	8000a2a <ts_formatstring+0x10e>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	1c5a      	adds	r2, r3, #1
 8000a1e:	60fa      	str	r2, [r7, #12]
 8000a20:	68ba      	ldr	r2, [r7, #8]
 8000a22:	1c51      	adds	r1, r2, #1
 8000a24:	60b9      	str	r1, [r7, #8]
 8000a26:	7812      	ldrb	r2, [r2, #0]
 8000a28:	701a      	strb	r2, [r3, #0]
	while(*fmt)
 8000a2a:	68bb      	ldr	r3, [r7, #8]
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	f47f af7d 	bne.w	800092e <ts_formatstring+0x12>
		}
	}
	*buf = 0;
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	2200      	movs	r2, #0
 8000a38:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	461a      	mov	r2, r3
 8000a3e:	697b      	ldr	r3, [r7, #20]
 8000a40:	1ad3      	subs	r3, r2, r3
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	3720      	adds	r7, #32
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}

08000a4a <siprintf>:
**            given character string according to the format parameter.
**  Returns:  Number of bytes written
**===========================================================================
*/
int siprintf(char *buf, const char *fmt, ...)
{
 8000a4a:	b40e      	push	{r1, r2, r3}
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b085      	sub	sp, #20
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
	int length;
	va_list va;
	va_start(va, fmt);
 8000a54:	f107 0320 	add.w	r3, r7, #32
 8000a58:	60bb      	str	r3, [r7, #8]
	length = ts_formatstring(buf, fmt, va);
 8000a5a:	68ba      	ldr	r2, [r7, #8]
 8000a5c:	69f9      	ldr	r1, [r7, #28]
 8000a5e:	6878      	ldr	r0, [r7, #4]
 8000a60:	f7ff ff5c 	bl	800091c <ts_formatstring>
 8000a64:	60f8      	str	r0, [r7, #12]
	va_end(va);
	return length;
 8000a66:	68fb      	ldr	r3, [r7, #12]
}
 8000a68:	4618      	mov	r0, r3
 8000a6a:	3714      	adds	r7, #20
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000a72:	b003      	add	sp, #12
 8000a74:	4770      	bx	lr
	...

08000a78 <USART2_Init>:
#include "usart2.h"


void USART2_Init(void) {
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
	//enable USART2
	RCC->APB1ENR |= 0x00020000;	 // set bit 17 (USART2 EN)
 8000a7c:	4a1f      	ldr	r2, [pc, #124]	; (8000afc <USART2_Init+0x84>)
 8000a7e:	4b1f      	ldr	r3, [pc, #124]	; (8000afc <USART2_Init+0x84>)
 8000a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a86:	6253      	str	r3, [r2, #36]	; 0x24
	RCC->AHBENR |= 0x00000001;	 // enable GPIOA port clock bit 0 (GPIOA EN)
 8000a88:	4a1c      	ldr	r2, [pc, #112]	; (8000afc <USART2_Init+0x84>)
 8000a8a:	4b1c      	ldr	r3, [pc, #112]	; (8000afc <USART2_Init+0x84>)
 8000a8c:	69db      	ldr	r3, [r3, #28]
 8000a8e:	f043 0301 	orr.w	r3, r3, #1
 8000a92:	61d3      	str	r3, [r2, #28]
	GPIOA->AFR[0] = 0x00000700;	 // GPIOx_AFRL p.188,AF7 p.177
 8000a94:	4b1a      	ldr	r3, [pc, #104]	; (8000b00 <USART2_Init+0x88>)
 8000a96:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000a9a:	621a      	str	r2, [r3, #32]
	GPIOA->AFR[0] |= 0x00007000; // GPIOx_AFRL p.188,AF7 p.177
 8000a9c:	4a18      	ldr	r2, [pc, #96]	; (8000b00 <USART2_Init+0x88>)
 8000a9e:	4b18      	ldr	r3, [pc, #96]	; (8000b00 <USART2_Init+0x88>)
 8000aa0:	6a1b      	ldr	r3, [r3, #32]
 8000aa2:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8000aa6:	6213      	str	r3, [r2, #32]
	GPIOA->MODER |= 0x00000020;	// MODER2=PA2(TX) to mode 10=alternate function mode. p184
 8000aa8:	4a15      	ldr	r2, [pc, #84]	; (8000b00 <USART2_Init+0x88>)
 8000aaa:	4b15      	ldr	r3, [pc, #84]	; (8000b00 <USART2_Init+0x88>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	f043 0320 	orr.w	r3, r3, #32
 8000ab2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= 0x00000080;	// MODER2=PA3(RX) to mode 10=alternate function mode. p184
 8000ab4:	4a12      	ldr	r2, [pc, #72]	; (8000b00 <USART2_Init+0x88>)
 8000ab6:	4b12      	ldr	r3, [pc, #72]	; (8000b00 <USART2_Init+0x88>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000abe:	6013      	str	r3, [r2, #0]

	USART2->BRR = 0x00000116;  // 115200 BAUD and crystal 32MHz. p710, 116
 8000ac0:	4b10      	ldr	r3, [pc, #64]	; (8000b04 <USART2_Init+0x8c>)
 8000ac2:	f44f 728b 	mov.w	r2, #278	; 0x116
 8000ac6:	609a      	str	r2, [r3, #8]
	USART2->CR1 = 0x00000008;  // TE bit. p739-740. Enable transmit
 8000ac8:	4b0e      	ldr	r3, [pc, #56]	; (8000b04 <USART2_Init+0x8c>)
 8000aca:	2208      	movs	r2, #8
 8000acc:	60da      	str	r2, [r3, #12]
	USART2->CR1 |= 0x00000004; // RE bit. p739-740. Enable receiver
 8000ace:	4a0d      	ldr	r2, [pc, #52]	; (8000b04 <USART2_Init+0x8c>)
 8000ad0:	4b0c      	ldr	r3, [pc, #48]	; (8000b04 <USART2_Init+0x8c>)
 8000ad2:	68db      	ldr	r3, [r3, #12]
 8000ad4:	f043 0304 	orr.w	r3, r3, #4
 8000ad8:	60d3      	str	r3, [r2, #12]
	USART2->CR3 |= (1 << 6); 	// enable DMAR ( DMA reception)
 8000ada:	4a0a      	ldr	r2, [pc, #40]	; (8000b04 <USART2_Init+0x8c>)
 8000adc:	4b09      	ldr	r3, [pc, #36]	; (8000b04 <USART2_Init+0x8c>)
 8000ade:	695b      	ldr	r3, [r3, #20]
 8000ae0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ae4:	6153      	str	r3, [r2, #20]
	USART2->CR1 |= 0x00002000; // UE bit. p739-740. Uart enable
 8000ae6:	4a07      	ldr	r2, [pc, #28]	; (8000b04 <USART2_Init+0x8c>)
 8000ae8:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <USART2_Init+0x8c>)
 8000aea:	68db      	ldr	r3, [r3, #12]
 8000aec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000af0:	60d3      	str	r3, [r2, #12]
}
 8000af2:	bf00      	nop
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bc80      	pop	{r7}
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	40023800 	.word	0x40023800
 8000b00:	40020000 	.word	0x40020000
 8000b04:	40004400 	.word	0x40004400

08000b08 <USART2_write>:

void USART2_write(char data) {
 8000b08:	b480      	push	{r7}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	4603      	mov	r3, r0
 8000b10:	71fb      	strb	r3, [r7, #7]
	// wait while TX buffer is empty
	while (!(USART2->SR & 0x0080)) {
 8000b12:	bf00      	nop
 8000b14:	4b06      	ldr	r3, [pc, #24]	; (8000b30 <USART2_write+0x28>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d0f9      	beq.n	8000b14 <USART2_write+0xc>
	}					 // TXE: Transmit data register empty. p736-737
	USART2->DR = (data); // p739
 8000b20:	4a03      	ldr	r2, [pc, #12]	; (8000b30 <USART2_write+0x28>)
 8000b22:	79fb      	ldrb	r3, [r7, #7]
 8000b24:	6053      	str	r3, [r2, #4]
}
 8000b26:	bf00      	nop
 8000b28:	370c      	adds	r7, #12
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bc80      	pop	{r7}
 8000b2e:	4770      	bx	lr
 8000b30:	40004400 	.word	0x40004400

08000b34 <__libc_init_array>:
 8000b34:	b570      	push	{r4, r5, r6, lr}
 8000b36:	2500      	movs	r5, #0
 8000b38:	4e0c      	ldr	r6, [pc, #48]	; (8000b6c <__libc_init_array+0x38>)
 8000b3a:	4c0d      	ldr	r4, [pc, #52]	; (8000b70 <__libc_init_array+0x3c>)
 8000b3c:	1ba4      	subs	r4, r4, r6
 8000b3e:	10a4      	asrs	r4, r4, #2
 8000b40:	42a5      	cmp	r5, r4
 8000b42:	d109      	bne.n	8000b58 <__libc_init_array+0x24>
 8000b44:	f000 f81a 	bl	8000b7c <_init>
 8000b48:	2500      	movs	r5, #0
 8000b4a:	4e0a      	ldr	r6, [pc, #40]	; (8000b74 <__libc_init_array+0x40>)
 8000b4c:	4c0a      	ldr	r4, [pc, #40]	; (8000b78 <__libc_init_array+0x44>)
 8000b4e:	1ba4      	subs	r4, r4, r6
 8000b50:	10a4      	asrs	r4, r4, #2
 8000b52:	42a5      	cmp	r5, r4
 8000b54:	d105      	bne.n	8000b62 <__libc_init_array+0x2e>
 8000b56:	bd70      	pop	{r4, r5, r6, pc}
 8000b58:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000b5c:	4798      	blx	r3
 8000b5e:	3501      	adds	r5, #1
 8000b60:	e7ee      	b.n	8000b40 <__libc_init_array+0xc>
 8000b62:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000b66:	4798      	blx	r3
 8000b68:	3501      	adds	r5, #1
 8000b6a:	e7f2      	b.n	8000b52 <__libc_init_array+0x1e>
 8000b6c:	08000bc0 	.word	0x08000bc0
 8000b70:	08000bc0 	.word	0x08000bc0
 8000b74:	08000bc0 	.word	0x08000bc0
 8000b78:	08000bc4 	.word	0x08000bc4

08000b7c <_init>:
 8000b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b7e:	bf00      	nop
 8000b80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b82:	bc08      	pop	{r3}
 8000b84:	469e      	mov	lr, r3
 8000b86:	4770      	bx	lr

08000b88 <_fini>:
 8000b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b8a:	bf00      	nop
 8000b8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b8e:	bc08      	pop	{r3}
 8000b90:	469e      	mov	lr, r3
 8000b92:	4770      	bx	lr
