/*
******************************************************************************
File:     main.c
Info:     Generated by Atollic TrueSTUDIO(R) 9.3.0   2024-10-02

The MIT License (MIT)
Copyright (c) 2019 STMicroelectronics

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

******************************************************************************
*/

/* Includes */
#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include "stm32l1xx.h"


/* Private typedef */
/* Private define  */
/* Private macro */
#define GAIN            35.11  // Amplification factor
#define SHUNT_RESISTOR  0.01   // Shunt resistor value in ohms
#define ADC_RESOLUTION  4095   // 12-bit ADC resolution
#define V_REF           3.3    // Reference voltage for ADC
#define ZERO_CURRENT_OFFSET 0  // ADC Read when no load, 0 current flow

/* Private variables */
/* Private function prototypes */
void adc_init();
uint32_t read_adc(uint8_t channel);

float get_voltage(uint32_t adc);
float get_current(float voltage);
float Calculate_Current(uint32_t adc_value);

void USART2_Init(void);
void USART2_write(char data);
void delay_Ms(int delay);

void print_adc(int adc_read);
void print_volt(float volt);
void print_current(float current);



/* Private functions */
void SetSysClock(void);

/**
**===========================================================================
**
**  Abstract: main program
**
**===========================================================================
*/
int main(void)
{
  /**
  *  IMPORTANT NOTE!
  *  See the <system_*.c> file and how/if the SystemInit() function updates 
  *  SCB->VTOR register. Sometimes the symbol VECT_TAB_SRAM needs to be defined 
  *  when building the project if code has been located to RAM and interrupts 
  *  are used. Otherwise the interrupt table located in flash will be used.
  *  E.g.  SCB->VTOR = 0x20000000;  
  */

  /* Configure the system clock to 32 MHz and update SystemCoreClock */
  SetSysClock();
  SystemCoreClockUpdate();

  /* TODO - Add your application code here */
  uint32_t adc_value;
  float voltage, current;

  USART2_Init();
  adc_init();

  /* Infinite loop */
  while (1)
  {
	  adc_value = read_adc(0);
	  voltage = get_voltage(adc_value);
	  current = Calculate_Current(adc_value);

	  print_adc(adc_value);
	  print_volt(voltage);
	  print_current(current);

	  delay_Ms(1000); // 1-second delay
  }
  return 0;
}

void adc_init() {
    // Enable GPIOA and GPIOC clocks (for PA0, PA1, PA4)
    RCC->AHBENR |= (1 << 0);  // Enable GPIOA clock
    RCC->AHBENR |= (1 << 2);  // Enable GPIOC clock

    // Set PA0, PA1, PA4 as analog mode (A0, A1, A2)
    GPIOA->MODER |= (0x3 << (0 * 2)) |  // Set PA0 to analog mode
                    (0x3 << (1 * 2)) |  // Set PA1 to analog mode
                    (0x3 << (4 * 2));   // Set PA4 to analog mode

    // Enable ADC1 clock
    RCC->APB2ENR |= (1 << 9);  // Enable ADC1 clock by setting bit 9

    // Configure ADC1 for single conversion mode
    ADC1->CR2 = 0;  // Reset CR2, setting it to single conversion mode

    // Set sampling time for channels 0, 1, and 4 to 384 cycles (long sampling time)
    ADC1->SMPR2 = (7 << 0) |  // Channel 0
                  (7 << 3) |  // Channel 1
                  (7 << 12);  // Channel 4

    // Set resolution to 12-bit (by default after reset)
    ADC1->CR1 &= ~(0x3 << 24);  // Clear bits 24 and 25 to select 12-bit resolution

    // Power on the ADC by setting the ADON bit (bit 0 of CR2)
    ADC1->CR2 |= (1 << 0);  // Set ADON bit to enable ADC

    // Wait for ADC to stabilize
    for (volatile int i = 0; i < 10000; i++);  // Simple delay loop
}

/*
uint32_t read_adc(uint8_t channel)
{
	uint16_t result = 0;
    ADC1->SQR5 = channel;      // Conversion sequence starts at selected channel
    ADC1->CR2 |= 1;            // Bit 0, ADC on/off (1=on, 0=off)
    ADC1->CR2 |= 0x40000000;   // Start conversion
    while (!(ADC1->SR & 2)) {} // Wait for conversion complete
    result = ADC1->DR;         // Read conversion result
    ADC1->CR2 &= ~1;           // Turn off the ADC
    return result;
}
*/

uint32_t read_adc(uint8_t channel)
{
    // Mock 2048 for half of the scale
    return 2048;
}

float get_voltage(uint32_t adc_value) // Read from output of differencial opamp.
{
	float shunt_voltage = ((float)(adc_value -  ZERO_CURRENT_OFFSET) * V_REF) / ADC_RESOLUTION;
    return shunt_voltage;
}

float get_current(float voltage)
{
    float current = voltage / (SHUNT_RESISTOR * GAIN);
    return current;
}

float Calculate_Current(uint32_t adc_value)
{
    float shunt_voltage = ((float)(adc_value -  ZERO_CURRENT_OFFSET) * V_REF) / ADC_RESOLUTION;

    float current = shunt_voltage / (SHUNT_RESISTOR * GAIN);

    return current;
}

void USART2_Init(void)
{
    RCC->APB1ENR |= 0x00020000;    // Set bit 17 (USART2 EN)
    RCC->AHBENR |= 0x00000001;     // Enable GPIOA port clock bit 0 (GPIOA EN)
    GPIOA->AFR[0] = 0x00000700;    // GPIOx_AFRL p.188, AF7 p.177
    GPIOA->AFR[0] |= 0x00007000;   // GPIOx_AFRL p.188, AF7 p.177
    GPIOA->MODER |= 0x00000020;    // MODER2=PA2(TX) to mode 10=alternate function mode. p184
    GPIOA->MODER |= 0x00000080;    // MODER2=PA3(RX) to mode 10=alternate function mode. p184

    USART2->BRR = 0x00000D05;      // 9600 BAUD and crystal 32 MHz
    USART2->CR1 = 0x00000008;      // TE bit. Enable transmit
    USART2->CR1 |= 0x00000004;     // RE bit. Enable receiver
    USART2->CR1 |= 0x00002000;     // UE bit. UART enable
}

void USART2_write(char data)
{
    // Wait while TX buffer is empty
    while (!(USART2->SR & 0x0080)) {}  // TXE: Transmit data register empty
    USART2->DR = data;
}

void delay_Ms(int delay)
{
    int i = 0;
    for (; delay > 0; delay--)
        for (i = 0; i < 2460; i++);
}

void print_adc(int adc_read)
{
    char buf[100];
    sprintf(buf, "ADC: %d", adc_read);

    int len = 0;
    while (buf[len] != '\0')
        len++;

    for (int i = 0; i < len; i++)
    {
        USART2_write(buf[i]);
    }

    USART2_write('\n');
    USART2_write('\r');
}

void print_volt(float volt)
{
    char buf[100];
    int volt_int = (int)(volt * 100);
    sprintf(buf, "Voltage: %d.%02d V", volt_int / 100, abs(volt_int % 100));

    int len = 0;
    while (buf[len] != '\0')
        len++;

    for (int i = 0; i < len; i++)
    {
        USART2_write(buf[i]);
    }

    USART2_write('\n');
    USART2_write('\r');
}

void print_current(float current)
{
    char buf[100];
    int current_int = (int)(current * 1000);  // Convert to mA for easier display
    sprintf(buf, "Current: %d.%03d A", current_int / 1000, abs(current_int % 1000));

    int len = 0;
    while (buf[len] != '\0')
        len++;

    for (int i = 0; i < len; i++)
    {
        USART2_write(buf[i]);
    }

    USART2_write('\n');
    USART2_write('\r');
}

/**
  * @brief  Configures the System clock frequency, AHB/APBx prescalers and Flash
  *         settings.
  * @note   This function should be called only once the RCC clock configuration
  *         is reset to the default reset state (done in SystemInit() function).
  * @param  None
  * @retval None
  */
#define HSI_STARTUP_TIMEOUT   ((uint16_t)0x0500) /* Time out for HSI start up */

void SetSysClock(void)
{
  __IO uint32_t StartUpCounter = 0, HSIStatus = 0;

  /* Enable HSI */
  RCC->CR |= ((uint32_t)RCC_CR_HSION);

  /* Wait till HSI is ready and if Time out is reached exit */
  do
  {
    HSIStatus = RCC->CR & RCC_CR_HSIRDY;
  } while((HSIStatus == 0) && (StartUpCounter != HSI_STARTUP_TIMEOUT));

  if ((RCC->CR & RCC_CR_HSIRDY) != RESET)
  {
    HSIStatus = (uint32_t)0x01;
  }
  else
  {
    HSIStatus = (uint32_t)0x00;
  }

  if (HSIStatus == (uint32_t)0x01)
  {
    /*  PLL configuration: PLLCLK = (HSI * 6)/3 = 32 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL |RCC_CFGR_PLLDIV));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSI | RCC_CFGR_PLLMUL4 | RCC_CFGR_PLLDIV2 );
  }

  else
  {
    /* If HSI fails to start-up, the application will have wrong clock
    configuration. User can add here some code to deal with this error */
  }
  
  /* Enable 64-bit access */
  FLASH->ACR |= FLASH_ACR_ACC64;
    
  /* Enable Prefetch Buffer */
  FLASH->ACR |= FLASH_ACR_PRFTEN;
    
  /* Flash 1 wait state */
  FLASH->ACR |= FLASH_ACR_LATENCY;
    
  /* Power enable */
  RCC->APB1ENR |= RCC_APB1ENR_PWREN;
    
  /* Select the Voltage Range 1 (1.8 V) */
  PWR->CR = PWR_CR_VOS_0;
    
  /* Wait Until the Voltage Regulator is ready */
  while((PWR->CSR & PWR_CSR_VOSF) != RESET)
  {
  }
    
  /* HCLK = SYSCLK /1*/
  RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
    
  /* PCLK2 = HCLK /1*/
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
    
  /* PCLK1 = HCLK /1*/
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV1;
    
  /* Enable PLL */
  RCC->CR |= RCC_CR_PLLON;
    
  /* Wait till PLL is ready */
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
  {
  }
    
  /* Select PLL as system clock source */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
  RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
    
  /* Wait till PLL is used as system clock source */
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
  {
  }
}
